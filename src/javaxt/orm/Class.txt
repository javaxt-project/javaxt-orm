package ${package};
import javaxt.json.*;
import javaxt.sql.Recordset;
import javaxt.sql.Connection;
import java.sql.SQLException;
${includes}

//******************************************************************************
//**  ${modelName} Class
//******************************************************************************
/**
 *   Used to represent a ${modelName}
 *
 ******************************************************************************/
public class ${modelName} {
    
    private Long id;
    ${privateFields}
    
    
  //**************************************************************************
  //** Constructor
  //**************************************************************************
    public ${modelName}(){}


  //**************************************************************************
  //** Constructor
  //**************************************************************************
  /** Creates a new instance of this class using an ID and a connection to
   *  the database.
   */
    public ${modelName}(long id, Connection conn) throws SQLException {
        Recordset rs = new Recordset();
        rs.open("select * from ${tableName} where id=" + id, conn);
        if (rs.EOF){
            rs.close();
            throw new SQLException("${modelName} not found.");
        }
        
        this.id = rs.getValue("id").toLong();
        ${getValues}
        rs.close();
        
        ${getModels}
    }
    
    
  //**************************************************************************
  //** Constructor
  //**************************************************************************
  /** Creates a new instance of this class using a JSON representation of a
   *  ${modelName}.
   */
    public ${modelName}(JSONObject json){
        update(json);
    }
    
    
  //**************************************************************************
  //** update
  //**************************************************************************
  /** Used to update attributes with attributes from another ${modelName}.
   */
    public void update(JSONObject json){
            
        Long id = json.get("id").toLong();
        if (id!=null && id>0) this.id = id;
        ${getJson}
    }
    
    
    public Long getID(){
        return id;
    }

    public void setID(long id){
        this.id = id;
    }
    
    ${publicMembers}
    
    
  //**************************************************************************
  //** save
  //**************************************************************************
  /** Used to save a ${modelName} in the database.
   */
    public void save(Connection conn) throws SQLException {
    
      //Add/Update record in the ${tableName} table
        Recordset rs = new Recordset();
        String sql = "select * from ${tableName} where id " + 
        (id==null ? "is null" : ("= "+id));
        
        rs.open(sql, conn, false);
        if (id==null) rs.addNew();
        
        ${setValues}
        
        rs.update();
        
        
      //Update local variables
        if (id==null) id = rs.getGeneratedKey().toLong();
        ${getLastModified}
        
        
      //Close recordset
        rs.close();
        
        ${saveModels}
    }
    
    
  //**************************************************************************
  //** delete
  //**************************************************************************
  /** Used to delete a ${modelName} from the database.
   */
    public void delete(Connection conn) throws SQLException {
        if (id==null) return;
        else conn.execute("delete from ${tableName} where id=" + id);
    }

    
  //**************************************************************************
  //** get
  //**************************************************************************
  /** Used to find a ${modelName} using a given set of constraints. Note that
   *  the last element in the list of constraints must be a Connection object.
   *  Example:
   *  ${modelName} obj = ${modelName}.get("id=", 1, conn);
   */
    public static ${modelName} get(Object...args) throws SQLException {
        Connection conn = (Connection) args[args.length-1];
        Long id = null;
        StringBuilder str = new StringBuilder("select id from ${tableName} where ");
        for (int i=0; i<args.length-1; i++){
            str.append(args[i]);
            i++;
            Object val = args[i];
            if (val instanceof String){
                str.append("'");
                str.append(val);
                str.append("'");
            }
            else{
                str.append(val);
            }
            if (i<args.length-2) str.append(" and ");
        }
        javaxt.sql.Recordset rs = new javaxt.sql.Recordset();
        rs.open(str.toString(), conn);
        if (!rs.EOF) id = rs.getValue(0).toLong();
        rs.close();

        if (id!=null) return new ${modelName}(id, conn);
        return null;
    }
    
    
  //**************************************************************************
  //** toJson
  //**************************************************************************
  /** Returns a string representation of the ${modelName} in JSON notation.
   */
    public JSONObject toJson(){
        JSONObject json = new JSONObject();
        if (id!=null) json.set("id", id);
        ${toJson}
        return json;
    }
}