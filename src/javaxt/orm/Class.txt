package ${package};
import javaxt.json.*;
import java.sql.SQLException;
${includes}

//******************************************************************************
//**  ${modelName} Class
//******************************************************************************
/**
 *   Used to represent a ${modelName}
 *
 ******************************************************************************/
 
public class ${modelName} extends javaxt.sql.Model {
    
    ${privateFields}
    
    
  //**************************************************************************
  //** Constructor
  //**************************************************************************
    public ${modelName}(){
        super("${tableName}");
        ${initArrays}
    }


  //**************************************************************************
  //** Constructor
  //**************************************************************************
  /** Creates a new instance of this class using a record ID in the database.
   */
    public ${modelName}(long id) throws SQLException {
        this();
        try{
            init(id);
        }
        catch(IllegalArgumentException e){
            throw new SQLException("Device not found");
        }
    }


  //**************************************************************************
  //** Constructor
  //**************************************************************************
  /** Creates a new instance of this class using a JSON representation of a
   *  ${modelName}.
   */
    public ${modelName}(JSONObject json){
        this();
        update(json);
    }


  //**************************************************************************
  //** update
  //**************************************************************************
  /** Used to update attributes using a record in the database.
   */
    protected void update(Object rs) throws SQLException {
    
      //Get values
        this.id = getValue(rs, "id").toLong();
        ${getValues}

        ${getModels}
    }


  //**************************************************************************
  //** update
  //**************************************************************************
  /** Used to update attributes with attributes from another ${modelName}.
   */
    public void update(JSONObject json){
            
        Long id = json.get("id").toLong();
        if (id!=null && id>0) this.id = id;
        ${getJson}
    }
    
    
    ${publicMembers}
    
    
  //**************************************************************************
  //** save
  //**************************************************************************
  /** Used to save a ${modelName} in the database.
   */
    public void save() throws SQLException {
        javaxt.sql.Connection conn = null;
        try{
            conn = getConnection(this.getClass());
        
          //Add/Update record in the ${tableName} table
            javaxt.sql.Recordset rs = new javaxt.sql.Recordset();
            String sql = "select * from " + tableName + " where id " + 
            (id==null ? "is null" : ("= "+id));

            rs.open(sql, conn, false);
            if (id==null) rs.addNew();

            ${setValues}

            rs.update();
        
        
          //Update local variables
            if (id==null) id = rs.getGeneratedKey().toLong();
            ${getLastModified}
        
        
          //Close recordset
            rs.close();
            conn.close();
        
            ${saveModels}
        }
        catch(SQLException e){
            if (conn!=null) conn.close();
            throw e;
        }
    }


  //**************************************************************************
  //** get
  //**************************************************************************
  /** Used to find a ${modelName} using a given set of constraints. Example:
   *  ${modelName} obj = ${modelName}.get("id=", 1);
   */
    public static ${modelName} get(Object...args) throws SQLException {
        Long id = new ${modelName}().getID(args);
        if (id!=null) return new ${modelName}(id);
        return null;
    }
    
    
  //**************************************************************************
  //** toJson
  //**************************************************************************
  /** Returns a string representation of the ${modelName} in JSON notation.
   */
    public JSONObject toJson(){
        JSONObject json = new JSONObject();
        if (id!=null) json.set("id", id);
        ${toJson}
        return json;
    }
}